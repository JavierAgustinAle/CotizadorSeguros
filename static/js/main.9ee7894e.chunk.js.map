{"version":3,"sources":["helper.js","components/Header.jsx","components/Formulario.jsx","components/Resultado.jsx","components/Resumen.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["obtenerDiferenciaAnio","year","Date","getFullYear","calcularMarca","modelo","incremento","obtenerPlan","plan","primeraMayuscula","texto","charAt","toUpperCase","slice","Header","props","className","titulo","Formulario","marcaRef","React","createRef","yearRef","planBasicoRef","planCompletoRef","handleFormulario","e","preventDefault","planElegido","current","checked","infoAuto","marca","value","cotizarSeguro","onSubmit","this","name","ref","required","type","Component","Resultado","resultado","Resumen","mostrarResumen","data","App","state","datos","incrementoPlan","parseFloat","toFixed","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9ee7894e.chunk.js","sourcesContent":["export function obtenerDiferenciaAnio(year) {\r\n    return new Date().getFullYear() - year;\r\n}\r\n\r\nexport function calcularMarca(modelo) {\r\n    let incremento;\r\n\r\n    switch (modelo) {\r\n        case 'europeo':\r\n            incremento = 1.30;\r\n            break;\r\n        case 'americano':\r\n            incremento = 1.15;\r\n            break;\r\n        case 'asiatico':\r\n            incremento = 1.05;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return incremento;\r\n}\r\nexport function obtenerPlan(plan) {\r\n    return (plan === 'basico') ? 1.20 : 1.50;\r\n}\r\nexport function primeraMayuscula(texto) {\r\n    return texto.charAt(0).toUpperCase() + texto.slice(1);\r\n}","import React from 'react'\r\n\r\nconst Header = props => {\r\n    return (\r\n        <header className=\"top\">\r\n            <h1>{props.titulo}</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react'\r\nimport { Component } from 'react';\r\n\r\nclass Formulario extends Component {\r\n\r\n    // refs para leer los valores de los campos del form\r\n    marcaRef = React.createRef();\r\n    yearRef = React.createRef();\r\n    planBasicoRef = React.createRef();\r\n    planCompletoRef = React.createRef();\r\n\r\n    // Asi hago la function, me ahorro poner el bind(this) cada vez que lo llamo\r\n    handleFormulario = (e) => {\r\n\r\n        e.preventDefault(); // Para que no ponga los datos del form en la URL\r\n\r\n        const planElegido = this.planBasicoRef.current.checked ? 'basico' : 'completo'\r\n\r\n        const infoAuto = {\r\n            marca: this.marcaRef.current.value,\r\n            year: this.yearRef.current.value,\r\n            plan: planElegido\r\n        }\r\n\r\n        // Enviamos la info al componente principal usando el metodo que nos vino en las props\r\n        this.props.cotizarSeguro(infoAuto)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"cotizar-auto\" onSubmit={this.handleFormulario}>\r\n                <div className=\"campo\">\r\n                    <label>Marca</label>\r\n                    <select name=\"marca\" ref={this.marcaRef} required>\r\n                        <option value=\"americano\">Americano</option>\r\n                        <option value=\"europeo\">Europeo</option>\r\n                        <option value=\"asiatico\">Asiatico</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"campo\">\r\n                    <label>Año</label>\r\n                    <select name=\"year\" ref={this.yearRef} required>\r\n                        <option value=\"2020\">2020</option>\r\n                        <option value=\"2019\">2019</option>\r\n                        <option value=\"2018\">2018</option>\r\n                        <option value=\"2017\">2017</option>\r\n                        <option value=\"2016\">2016</option>\r\n                        <option value=\"2015\">2015</option>\r\n                        <option value=\"2014\">2014</option>\r\n                        <option value=\"2013\">2013</option>\r\n                        <option value=\"2012\">2012</option>\r\n                        <option value=\"2011\">2011</option>\r\n                        <option value=\"2010\">2010</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"campo\">\r\n                    <label>Plan:</label>\r\n                    <input type=\"radio\" ref={this.planBasicoRef} name=\"plan\" value=\"basico\" /> Básico\r\n                    <input type=\"radio\" ref={this.planCompletoRef} name=\"plan\" value=\"completo\" /> Completo\r\n            </div>\r\n\r\n                <button type=\"submit\" className=\"boton\">Cotizar</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\n\r\nconst Resultado = ({ resultado }) => {\r\n\r\n    return (\r\n        <>\r\n            <div className=\"gran-total\">\r\n                {\r\n                    !resultado\r\n                        ? <div>\r\n                            <span>Elije Marca, Año y Plan de Seguro</span>\r\n                        </div>\r\n                        : <span> El Total es: $ {resultado}</span>\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Resultado;","import React, { Component } from 'react';\r\n// helper\r\nimport { primeraMayuscula } from '../helper';\r\n// component\r\nimport Resultado from './Resultado';\r\n\r\nclass Resumen extends Component {\r\n\r\n    mostrarResumen = () => {\r\n        const { marca, year, plan } = this.props.data;\r\n\r\n        if (!marca || !year || !plan) return null;\r\n        return (\r\n            <div className=\"resumen\">\r\n                <h2>Resumen De Cotizacion</h2>\r\n                <li>Marca: {primeraMayuscula(marca)}</li>\r\n                <li>Plan: {primeraMayuscula(plan)}</li>\r\n                <li>Año del Auto: {primeraMayuscula(year)}</li>\r\n            </div>\r\n        )\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {this.mostrarResumen()}\r\n                <Resultado\r\n                    resultado={this.props.resultado}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Resumen;","import React, { Component } from 'react';\n\n// helper\nimport { obtenerDiferenciaAnio, calcularMarca, obtenerPlan } from '../helper';\n\n// Components\nimport Header from './Header'\nimport Formulario from './Formulario';\nimport Resumen from './Resumen';\n\n\nclass App extends Component {\n\n  state = {\n    resultado: '',\n    datos: {}\n  }\n\n  cotizarSeguro = (data) => {     // La data que recibe es la enviada por el componente hijo Formulario.jsx\n    const { marca, year, plan } = data;\n    // Precio Base\n    let resultado = 2000;\n\n    // Obtener la diferencia del año elegido con el año actual\n    const diferencia = obtenerDiferenciaAnio(year);\n\n    // Por cada año que retrocedo resto el 3%\n    resultado -= ((diferencia * 3) * resultado) / 100;\n\n    // Aumento de valor segun la marca del auto\n    resultado = calcularMarca(marca) * resultado;\n\n    // Depende el plan elegido incrementar\n    let incrementoPlan = obtenerPlan(plan);\n    resultado = parseFloat(incrementoPlan * resultado).toFixed(2);\n\n    const infoAuto = {\n      marca: marca,\n      year: year,\n      plan: plan\n    }\n\n    this.setState({\n      resultado: resultado,\n      datos: infoAuto\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"contenedor\">\n        <Header\n          titulo='Cotizador Seguro de Autos'\n        />\n        <div className=\"contenedor-formulario\">\n          <Formulario\n            cotizarSeguro={this.cotizarSeguro}\n          />\n          <Resumen\n            data={this.state.datos}\n            resultado={this.state.resultado}\n          />\n\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n\n\n\n// Creamos una funcion en este componente padre, se la pasamos como props a su hijo (Formulario), y \n  // este la utiliza pasandole los datos que junto el, de esta manera el padre recibe los datos del hijo","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}